{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNeXlYLH8Z8Zw4wllhokx0V"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Data Input and Modul Loading"],"metadata":{"id":"-8jIZxh4wQq2"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e219Yj_G1ps7","executionInfo":{"status":"ok","timestamp":1706598648514,"user_tz":-420,"elapsed":22622,"user":{"displayName":"Ismael","userId":"16843604596752209281"}},"outputId":"be4ecb6d-92cf-4991-88c0-703d4b1b0233"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive/\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive/', force_remount=True)"]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from pandas import DataFrame as df\n","from sklearn.metrics import mean_absolute_error, mean_squared_error, explained_variance_score, r2_score, mean_absolute_percentage_error\n","from sklearn import svm\n","\n","random = 30139 #random number for consistent results, can be changed to anything"],"metadata":{"id":"HWcVyPzVux25"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data = pd.read_csv('/content/drive/MyDrive/data/desc-set.csv', index_col=[0]) #change accordingly with the location of your csv file\n"],"metadata":{"id":"vHP5CYn51sSm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X= data[['FNSA3 (Jurs Descriptors)', 'Chi (3): cluster (valence modified) (Fast Descriptors)', 'Molecular density (Spatial Descriptors)']] #Select the descriptor's columns\n","y = data['pIC50']  # Setting y as the target variable.\n","print(X_ga_qc.iloc[:5, :5])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UR7LkzkMSEYE","executionInfo":{"status":"ok","timestamp":1706598649937,"user_tz":-420,"elapsed":30,"user":{"displayName":"Ismael","userId":"16843604596752209281"}},"outputId":"199be4e9-50a6-4dd7-fd65-9b41b23c140a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["           qC2  dEL-H\n","senyawa              \n","DH_7    -0.045  4.921\n","DH_8    -0.152  4.946\n","DH_9    -0.153  2.304\n","DH_10   -0.157  4.928\n","DH_12   -0.131  2.843\n"]}]},{"cell_type":"code","source":["X_train = X.iloc[:16] #select rows for train set\n","X_test = X.iloc[16:20] #select rows for test set\n","\n","y_train = y.iloc[:16]\n","y_test = y.iloc[16:20]"],"metadata":{"id":"49FI30a1SF9G"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"OaPlbTb7pjo_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#SUPPORT VECTOR MACHINE"],"metadata":{"id":"XRSVvCKOBygo"}},{"cell_type":"code","source":["# fitting\n","svr = svm.SVR(kernel='rbf', C=1, epsilon=0.001, gamma='scale') #hyperparameter need to be tuned first\n","svr_fit = svr.fit(X_train, y_train)"],"metadata":{"id":"F9kQ_soSfLY4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#prediction on the training dataset\n","ytrain_pred = svr_fit.predict(X_train)\n","#training model evaluation\n","#training r-sq\n","print('The training r_sq is: %.3f'% svr_fit.score(X_train, y_train))\n","#OOB training\n","#print('The OOB score is: %.3f'% rf_base.oob_score_)\n","#RMSE\n","print('The RMSE is: %.3f'% np.sqrt(mean_squared_error(y_train, ytrain_pred)))\n","#MAPE\n","print('The MAPE is: %.3f'% mean_absolute_percentage_error(y_train, ytrain_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1mka7hMugXhx","executionInfo":{"status":"ok","timestamp":1705569204041,"user_tz":-420,"elapsed":31,"user":{"displayName":"Ismael","userId":"16843604596752209281"}},"outputId":"598649f9-6b08-4531-ee68-e587c8fb5208"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The training r_sq is: -0.149\n","The RMSE is: 1.232\n","The MAPE is: 0.120\n"]}]},{"cell_type":"code","source":["#prediction on the testing data\n","ytest_pred = svr_fit.predict(X_test)\n","\n","#testing coef. of determination\n","print('The testing r_sq is: %.3f'% r2_score(y_test, ytest_pred))\n","#model evaluation metrics on test set\n","#RMSE\n","print('The RMSE is: %.3f'% np.sqrt(mean_squared_error(y_test, ytest_pred)))\n","#MAPE\n","print('The MAPE is: %.3f'% mean_absolute_percentage_error(y_test, ytest_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Vbzjv_amgnuO","executionInfo":{"status":"ok","timestamp":1705569210351,"user_tz":-420,"elapsed":525,"user":{"displayName":"Ismael","userId":"16843604596752209281"}},"outputId":"ad5a400a-0e0f-4f19-ccd0-8224dbb40253"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The testing r_sq is: -0.123\n","The RMSE is: 1.909\n","The MAPE is: 0.148\n"]}]},{"cell_type":"code","source":["#get the predicted targets\n","df_ytrain = pd.DataFrame(y_train)\n","df_ytrainpred = pd.DataFrame(ytrain_pred)\n","df_ytest = pd.DataFrame(y_test)\n","df_ytestpred = pd.DataFrame(ytest_pred)\n","\n","print(df_ytrainpred)\n","print(df_ytestpred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kMlNRqbDgvUL","executionInfo":{"status":"ok","timestamp":1705569212318,"user_tz":-420,"elapsed":105,"user":{"displayName":"Ismael","userId":"16843604596752209281"}},"outputId":"660e3ba8-df90-4261-b31e-506d4ea724f1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["           0\n","0   4.963292\n","1   5.201540\n","2   5.213662\n","3   4.955083\n","4   4.991945\n","5   4.950309\n","6   4.999276\n","7   4.962663\n","8   5.019000\n","9   4.959942\n","10  5.028269\n","11  5.035160\n","12  5.223000\n","13  5.202479\n","14  4.963685\n","15  4.957722\n","          0\n","0  5.184798\n","1  5.010824\n","2  5.014997\n","3  5.171872\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"97pYXAcfpxDw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Qm_cw55Sp3Tn"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4NHTvTwHp5fm"},"source":["#SVR HYPERPARAMETERS TUNING"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VHme3ByzDUU0"},"outputs":[],"source":["#loading the dataset\n","#import pandas library\n","import pandas as pd\n","import numpy as np\n","from pandas import DataFrame as df\n","from sklearn.metrics import mean_absolute_error, mean_squared_error, explained_variance_score, r2_score\n","from sklearn import svm"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SujWqyXiH43k"},"outputs":[],"source":["# Instantiate svr on all feature\n","svr = svm.SVR(C=2)\n","svr_base = svr.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":51,"status":"ok","timestamp":1705478338799,"user":{"displayName":"Ismael","userId":"16843604596752209281"},"user_tz":-420},"id":"bPjVKaYyIfCl","outputId":"8429aa04-fb20-4362-f7f6-0d9e14b84c35"},"outputs":[{"output_type":"stream","name":"stdout","text":["The training r_sq is: -0.063\n","The MSE is: 1.406\n","The RMSE is: 1.186\n"]}],"source":["#prediction on the training dataset\n","ytrain_pred = svr_base.predict(X_train)\n","#training model evaluation\n","#training r-sq\n","print('The training r_sq is: %.3f'% svr_base.score(X_train, y_train))\n","#the MSE\n","print('The MSE is: %.3f'% mean_squared_error(y_train, ytrain_pred))\n","#RMSE\n","print('The RMSE is: %.3f'% np.sqrt(mean_squared_error(y_train, ytrain_pred)))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":463,"status":"ok","timestamp":1705478345741,"user":{"displayName":"Ismael","userId":"16843604596752209281"},"user_tz":-420},"id":"3GBVRxiRJxaU","outputId":"43a715ee-1bc8-4c57-ad52-d54d48c3c2ef"},"outputs":[{"output_type":"stream","name":"stdout","text":["The testing r_sq is: -0.092\n","The MSE is: 3.542\n","The RMSE is: 1.882\n"]}],"source":["#prediction on the testing data\n","ytest_pred = svr_base.predict(X_test)\n","\n","#testing coef. of determination\n","print('The testing r_sq is: %.3f'% r2_score(y_test, ytest_pred))\n","#model evaluation metrics on test set\n","#the MSE\n","print('The MSE is: %.3f'% mean_squared_error(y_test, ytest_pred))\n","#RMSE\n","print('The RMSE is: %.3f'% np.sqrt(mean_squared_error(y_test, ytest_pred)))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":55,"status":"ok","timestamp":1705478349351,"user":{"displayName":"Ismael","userId":"16843604596752209281"},"user_tz":-420},"id":"vz3he-QAJH4z","outputId":"0a497c67-81bd-47ae-a14c-6f541f0032a2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Parameters currently in use:\n","\n","{'C': 2,\n"," 'cache_size': 200,\n"," 'coef0': 0.0,\n"," 'degree': 3,\n"," 'epsilon': 0.1,\n"," 'gamma': 'scale',\n"," 'kernel': 'rbf',\n"," 'max_iter': -1,\n"," 'shrinking': True,\n"," 'tol': 0.001,\n"," 'verbose': False}\n"]}],"source":["from pprint import pprint\n","# Look at parameters used by our current forest\n","print('Parameters currently in use:\\n')\n","pprint(svr_base.get_params())"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":466},"executionInfo":{"elapsed":875,"status":"ok","timestamp":1705478354472,"user":{"displayName":"Ismael","userId":"16843604596752209281"},"user_tz":-420},"id":"HclDOPfTLlrB","outputId":"09c8689f-07fd-46a2-9536-8f099c846204"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 0, 'Permutation Importance')"]},"metadata":{},"execution_count":29},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["from sklearn.inspection import permutation_importance\n","from sklearn.inspection import permutation_importance\n","import numpy as np\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","perm_importance = permutation_importance(svr, X_train2, y_train)\n","\n","feature_names = X_train2.columns\n","features = np.array(feature_names)\n","\n","sorted_idx = perm_importance.importances_mean.argsort()\n","plt.barh(features[sorted_idx], perm_importance.importances_mean[sorted_idx])\n","plt.xlabel(\"Permutation Importance\")"]},{"cell_type":"markdown","metadata":{"id":"E7Pw2g3oc7uc"},"source":["***RandomizedSearchCV***"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":705,"status":"ok","timestamp":1705478361405,"user":{"displayName":"Ismael","userId":"16843604596752209281"},"user_tz":-420},"id":"V6Nta550Nzcm","outputId":"25bf465b-4eb0-440f-8f3e-c4947a54f1bc"},"outputs":[{"output_type":"stream","name":"stdout","text":["{'C': [0, 0, 0, 0, 1, 10, 100],\n"," 'epsilon': [0.0001, 0.001, 0.01, 0.1, 1.0, 10.0],\n"," 'gamma': [0.0001, 0.001, 0.01, 0.1, 1.0, 10.0, 100.0],\n"," 'kernel': ['linear', 'rbf']}\n"]}],"source":["from sklearn.model_selection import RandomizedSearchCV\n","# kernel\n","kernel = ['linear', 'rbf']\n","# C\n","C = [int(x) for x in np.logspace(-4, 2, num = 7)]\n","# epsilon\n","epsilon = [float(x) for x in np.logspace(-4, 1, num = 6)]\n","#gamma\n","gamma = [float(x) for x in np.logspace(-4, 2, num=7)]\n","# Create the random grid\n","random_grid = {'kernel': kernel,\n","               'C': C,\n","               'epsilon': epsilon,\n","               'gamma': gamma}\n","pprint(random_grid)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PiW3uNKmN6kI","colab":{"base_uri":"https://localhost:8080/","height":133},"executionInfo":{"status":"ok","timestamp":1705478915152,"user_tz":-420,"elapsed":551063,"user":{"displayName":"Ismael","userId":"16843604596752209281"}},"outputId":"53059b39-6f4f-45e0-8cca-0d6d1dfbbff6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 3 folds for each of 588 candidates, totalling 1764 fits\n"]},{"output_type":"execute_result","data":{"text/plain":["RandomizedSearchCV(cv=3, estimator=SVR(), n_iter=1500, n_jobs=-1,\n","                   param_distributions={'C': [0, 0, 0, 0, 1, 10, 100],\n","                                        'epsilon': [0.0001, 0.001, 0.01, 0.1,\n","                                                    1.0, 10.0],\n","                                        'gamma': [0.0001, 0.001, 0.01, 0.1, 1.0,\n","                                                  10.0, 100.0],\n","                                        'kernel': ['linear', 'rbf']},\n","                   refit='r2', scoring=['r2', 'neg_root_mean_squared_error'],\n","                   verbose=2)"],"text/html":["<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomizedSearchCV(cv=3, estimator=SVR(), n_iter=1500, n_jobs=-1,\n","                   param_distributions={&#x27;C&#x27;: [0, 0, 0, 0, 1, 10, 100],\n","                                        &#x27;epsilon&#x27;: [0.0001, 0.001, 0.01, 0.1,\n","                                                    1.0, 10.0],\n","                                        &#x27;gamma&#x27;: [0.0001, 0.001, 0.01, 0.1, 1.0,\n","                                                  10.0, 100.0],\n","                                        &#x27;kernel&#x27;: [&#x27;linear&#x27;, &#x27;rbf&#x27;]},\n","                   refit=&#x27;r2&#x27;, scoring=[&#x27;r2&#x27;, &#x27;neg_root_mean_squared_error&#x27;],\n","                   verbose=2)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomizedSearchCV</label><div class=\"sk-toggleable__content\"><pre>RandomizedSearchCV(cv=3, estimator=SVR(), n_iter=1500, n_jobs=-1,\n","                   param_distributions={&#x27;C&#x27;: [0, 0, 0, 0, 1, 10, 100],\n","                                        &#x27;epsilon&#x27;: [0.0001, 0.001, 0.01, 0.1,\n","                                                    1.0, 10.0],\n","                                        &#x27;gamma&#x27;: [0.0001, 0.001, 0.01, 0.1, 1.0,\n","                                                  10.0, 100.0],\n","                                        &#x27;kernel&#x27;: [&#x27;linear&#x27;, &#x27;rbf&#x27;]},\n","                   refit=&#x27;r2&#x27;, scoring=[&#x27;r2&#x27;, &#x27;neg_root_mean_squared_error&#x27;],\n","                   verbose=2)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: SVR</label><div class=\"sk-toggleable__content\"><pre>SVR()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVR</label><div class=\"sk-toggleable__content\"><pre>SVR()</pre></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":31}],"source":["# Use the random grid to search for best hyperparameters\n","# First create the base model to tune\n","svr = svm.SVR()\n","# Random search of parameters, using 4 fold cross validation,\n","# search across 1500 different combinations, and use all available cores\n","svr_random = RandomizedSearchCV(estimator = svr, param_distributions = random_grid, n_iter = 1500, cv = 3, verbose=2, scoring=['r2', 'neg_root_mean_squared_error'], refit = 'r2', n_jobs = -1)\n","# Fit the random search model\n","svr_random.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yXpU7wH7OKsI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1705478915153,"user_tz":-420,"elapsed":146,"user":{"displayName":"Ismael","userId":"16843604596752209281"}},"outputId":"7ca9de30-0c9b-46d0-ec15-f6e9242b9da7"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'kernel': 'rbf', 'gamma': 1.0, 'epsilon': 0.0001, 'C': 1}"]},"metadata":{},"execution_count":32}],"source":["# Access the randomized hyperparameters and their values\n","random_params = svr_random.cv_results_\n","\n","# Convert the randomized hyperparameters to a DataFrame\n","hyperparameters_rand_df = pd.DataFrame(random_params)\n","\n","# Save the DataFrame to a CSV file\n","hyperparameters_rand_df.to_csv('random_hyperparameters.csv')\n","\n","svr_random.best_params_"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1eXVnNhNOB2G","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1705478924874,"user_tz":-420,"elapsed":931,"user":{"displayName":"Ismael","userId":"16843604596752209281"}},"outputId":"25ebfef7-b108-447b-efa4-d327c51f9408"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model Performance\n","Average Error: 1.2213.\n","Accuracy = 83.50%.\n"]}],"source":["def evaluate(model, test_features, test_labels):\n","    predictions = model.predict(test_features)\n","    errors = abs(predictions - test_labels)\n","    mape = 100 * np.mean(errors / test_labels)\n","    accuracy = 100 - mape\n","    print('Model Performance')\n","    print('Average Error: {:0.4f}.'.format(np.mean(errors)))\n","    print('Accuracy = {:0.2f}%.'.format(accuracy))\n","\n","    return accuracy\n","base_model = svm.SVR(C=2)\n","base_model.fit(X_train, y_train)\n","base_accuracy = evaluate(base_model, X_test, y_test)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Q1NlhiBcOY8_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1705478929435,"user_tz":-420,"elapsed":49,"user":{"displayName":"Ismael","userId":"16843604596752209281"}},"outputId":"2b970de8-a916-4c80-c82c-263dce84d05c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model Performance\n","Average Error: 1.2895.\n","Accuracy = 81.98%.\n","Improvement of -1.82%.\n"]}],"source":["best_random = svr_random.best_estimator_\n","random_accuracy = evaluate(best_random, X_test, y_test)\n","print('Improvement of {:0.2f}%.'.format( 100 * (random_accuracy - base_accuracy) / base_accuracy))"]},{"cell_type":"markdown","metadata":{"id":"JjdQZmGTc0-e"},"source":["***GridSearchCV***"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4KNxWSrQc0Ur"},"outputs":[],"source":["from sklearn.model_selection import GridSearchCV\n","# Create the parameter grid based on the results of random search\n","\n","param_grid = [\n","               {'C': [1, 2, 3, 4, 5, 10, 50, 100, 150, 175, 200], 'kernel': ['linear'], 'epsilon': [0.001, 0.005, 0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 'scale']},\n","               {'C': [1, 2, 3, 4, 5, 10, 50, 100, 150, 175, 200], 'gamma': [0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 'scale'], 'kernel': ['rbf'], 'epsilon': [0.001, 0.005, 0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5]}\n","                ]\n","# Create a based model\n","svr = svm.SVR()\n","# Instantiate the grid search model\n","grid_search = GridSearchCV(estimator = svr, param_grid = param_grid,\n","                          cv = 3, n_jobs = -1, verbose = 2, scoring=['r2', 'neg_mean_squared_error'], refit = 'neg_mean_squared_error')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1261088,"status":"ok","timestamp":1705485071888,"user":{"displayName":"Ismael","userId":"16843604596752209281"},"user_tz":-420},"id":"sBNUSJawdUk8","outputId":"e42efc71-baf0-4a8c-d029-02d5d2f27bd3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 5 folds for each of 803 candidates, totalling 4015 fits\n"]},{"output_type":"execute_result","data":{"text/plain":["{'C': 1, 'epsilon': 0.001, 'gamma': 'scale', 'kernel': 'rbf'}"]},"metadata":{},"execution_count":58}],"source":["# Fit the grid search to the data\n","grid_search.fit(X_train, y_train)\n","grid_search.best_params_"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":72,"status":"ok","timestamp":1705485071888,"user":{"displayName":"Ismael","userId":"16843604596752209281"},"user_tz":-420},"id":"g0B0zgAPdlJB","outputId":"a3833527-dc0d-4238-c5f8-3a490e8efb34"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model Performance\n","Average Error: 1.2213.\n","Accuracy = 83.50%.\n","Model Performance\n","Average Error: 1.1499.\n","Accuracy = 85.20%.\n","Improvement of 2.04%.\n"]}],"source":["def evaluate(model, test_features, test_labels):\n","    predictions = model.predict(test_features)\n","    errors = abs(predictions - test_labels)\n","    mape = 100 * np.mean(errors / test_labels)\n","    accuracy = 100 - mape\n","    print('Model Performance')\n","    print('Average Error: {:0.4f}.'.format(np.mean(errors)))\n","    print('Accuracy = {:0.2f}%.'.format(accuracy))\n","\n","    return accuracy\n","base_model = svm.SVR(C=2)\n","base_model.fit(X_train, y_train)\n","base_accuracy = evaluate(base_model, X_test, y_test)\n","\n","best_grid = grid_search.best_estimator_\n","grid_accuracy = evaluate(best_grid, X_test, y_test)\n","\n","\n","print('Improvement of {:0.2f}%.'.format( 100 * (grid_accuracy - base_accuracy) / base_accuracy))\n","results = grid_search.cv_results_"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QGbq2Yk4drZm"},"outputs":[],"source":["# Access the randomized hyperparameters and their values\n","grids_params = grid_search.cv_results_\n","\n","# Convert the randomized hyperparameters to a DataFrame\n","hyperparameters_df = pd.DataFrame(grids_params)\n","\n","# Save the DataFrame to a CSV file\n","hyperparameters_df.to_csv('grids_hyperparameters.csv')"]}]}